/**
 *    Copyright 2009-2018 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.apache.ibatis.executor.statement;

import org.apache.ibatis.cursor.Cursor;
import org.apache.ibatis.executor.Executor;
import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;
import org.apache.ibatis.executor.keygen.KeyGenerator;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ResultSetType;
import org.apache.ibatis.session.ResultHandler;
import org.apache.ibatis.session.RowBounds;

import java.sql.*;
import java.util.List;

/**
 * @author Clinton Begin
 */
public class PreparedStatementHandler extends BaseStatementHandler {

  public PreparedStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
    super(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);
  }

  // 对Statement执行更新操作
  @Override
  public int update(Statement statement) throws SQLException {
    // 🇫🇯🇫🇯🇫🇯 建议debug -- 看看StateHandler的处理过程哦

    // 1. 强转后进行执行Statement
    PreparedStatement ps = (PreparedStatement) statement;
    ps.execute(); // -- 会连接数据库然后执行对应的额sql -- PreparedStatement的占位符填充已经在
    // 2. 获取执行后的结果 rowCount
    int rows = ps.getUpdateCount();
    // 3. 从boundSql获取形参对象 -- 主要是 KeyGenerator.processAfter() 可能会向 parameterObject 回填数据
    Object parameterObject = boundSql.getParameterObject();
    // 4. 执行完后需要指定 mappedStatement.getKeyGenerator().processAfter()
    KeyGenerator keyGenerator = mappedStatement.getKeyGenerator();
    // 传入的对象 -- 执行器executor\DML标签的mappedStatement\执行的PreparedStatement\传入的形参parameterObject
    keyGenerator.processAfter(executor, mappedStatement, ps, parameterObject);
    return rows;
  }

  @Override
  public void batch(Statement statement) throws SQLException {
    PreparedStatement ps = (PreparedStatement) statement;
    ps.addBatch();
  }

  @Override
  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
    // 开始执行sql的查询
    PreparedStatement ps = (PreparedStatement) statement;
    ps.execute();
    // 查询语句的结果会使用resultSetHandler将结果回填进去
    return resultSetHandler.handleResultSets(ps);
  }

  @Override
  public <E> Cursor<E> queryCursor(Statement statement) throws SQLException {
    PreparedStatement ps = (PreparedStatement) statement;
    ps.execute();
    return resultSetHandler.handleCursorResultSets(ps);
  }

  @Override
  protected Statement instantiateStatement(Connection connection) throws SQLException {
    // 获取执行的动态的sql

    String sql = boundSql.getSql();
    // mappedStatement.getKeyGenerator() 三种情况
    // 1. 开启全局配置,并且局部配置开启useGeneratorKey -- 就是Jdbc3KeyGenerator
    // 2. 没有开启全局配置 -- 就是NoKeyGenerator
    // 3. DML标签中有<SelectKey>标签
    if (mappedStatement.getKeyGenerator() instanceof Jdbc3KeyGenerator) {
      String[] keyColumnNames = mappedStatement.getKeyColumns();
      if (keyColumnNames == null) {
        //  当我们决定配置insert/update中的useGeneratedKeys属性的值为true,以此来获取数据库生成的主键时,我们就需要着手配置keyProperty属性和keyColumn属性了.
        //  keyProperty属性的取值是java对象的属性名,当获取到新增数据记录的主键之后,mybatis会将主键对应的值赋给keyProperty指向的属性,如果有多个属性,可以使用,进行分隔.
        //  keyColumn属性稍有不同,他只在statementType属性为PREPARED时才会生效.
        //  keyColumn属性用于指定当Statement执行完成后,需要返回的数据的数据列名称,如果有多个数据列的话,可以使用,进行分隔.
        //  前面我们已经说过了statementType属性用于控制Statement实例的类型,其中PREPARED对应的是PreparedStatement.
        //  在JDBC中,Connection通过prepareStatement()方法来创建PreparedStatement对象.
        //  prepareStatement()方法有多种重载实现,我们这里主要看下面两种:
        //  方法一:
        //  PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
        //    -- 获取PreparedStatement对象时,如果我们把autoGeneratedKeys参数设置为1,PreparedStatement的getGeneratedKeys()方法返回的是本次PreparedStatement语句执行时创建的主键信息.
        //  方法二:
        //  PreparedStatement prepareStatement(String sql, String columnNames[])
        //    -- 获取PreparedStatement对象时,PreparedStatement的getGeneratedKeys()方法返回的columnNames参数指定的数据列的数据信息

        // 在statementType属性的取值为PREPARED时,如果我们配置了keyColumn属性,那么mybatis将会通过方法二来创建PreparedStatement对象.

        // 1. 这里会自动返回生成主键信息
        return connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
      } else {
        // 2. 如果有指定需要返回哪些列的信息,可以在insert/update标签中执行keyColumnNames
        return connection.prepareStatement(sql, keyColumnNames);
      }
    } else if (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) {
      // 如果ResultSet的处理类型指定为 Default 直接根据sql创建即可
      return connection.prepareStatement(sql);
    } else {
      // 使用MapperStatement指定的ResultSetType值
      return connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);
    }
  }

  @Override
  public void parameterize(Statement statement) throws SQLException {
    parameterHandler.setParameters((PreparedStatement) statement);
  }

}
